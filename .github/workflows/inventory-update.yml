name: Inventory Update Automation

on:
  # Webhook trigger from cron-job.org
  repository_dispatch:
    types: [inventory-update]

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      mode:
        description: "Execution mode"
        required: false
        default: "dropbox"
        type: choice
        options:
          - dropbox
          - test
      test_file:
        description: "Path to test file (optional)"
        required: false
        type: string

# Grant permissions for the workflow to write to the repository
permissions:
  contents: write
  actions: read

# Ensure only one instance runs at a time
concurrency:
  group: inventory-update
  cancel-in-progress: false

jobs:
  inventory-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create environment variables file
        run: |
          cat > .env << EOF
          # Email Configuration (Strato SMTP - for notifications only)
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}

          # Dropbox Configuration
          DROPBOX_APP_KEY=${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET=${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN=${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_FOLDER_PATH=${{ secrets.DROPBOX_FOLDER_PATH }}

          # Holded API Configuration
          HOLDED_API_KEY=${{ secrets.HOLDED_API_KEY }}
          HOLDED_BASE_URL=${{ secrets.HOLDED_BASE_URL }}
          HOLDED_WAREHOUSE_ID=${{ secrets.HOLDED_WAREHOUSE_ID }}
          HOLDED_CONWAY_CATEGORY_ID=${{ secrets.HOLDED_CONWAY_CATEGORY_ID }}

          # Notification Email
          NOTIFICATION_EMAIL=${{ secrets.NOTIFICATION_EMAIL }}

          # File Processing
          ALLOWED_EXTENSIONS=csv,xlsx,xls
          MAX_FILE_SIZE_MB=10
          EOF

      - name: Test connections (if test mode)
        if: ${{ github.event.inputs.mode == 'test' }}
        run: python main.py test

      - name: Run Dropbox automation
        if: ${{ github.event.inputs.mode == 'dropbox' || github.event_name == 'repository_dispatch' }}
        run: python main.py

      - name: Process test file
        if: ${{ github.event.inputs.mode == 'test' && github.event.inputs.test_file != '' }}
        run: python main.py file "${{ github.event.inputs.test_file }}"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inventory-update-logs-${{ github.run_number }}
          path: |
            dropbox_state.json
          retention-days: 30

      - name: Configure Git
        if: always()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push logs
        if: always()
        run: |
          # Add timestamp to commit message
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          # Note: Log files are no longer saved to disk - logging is console-only

          if [ -f "dropbox_state.json" ]; then
            git add dropbox_state.json
            echo "Added dropbox_state.json"
          fi

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            # Commit with [skip ci] to prevent infinite loops
            git commit -m "ðŸ“Š Auto-update logs - $TIMESTAMP [skip ci]
            
            - Updated inventory logs
            - Run #${{ github.run_number }}
            - Trigger: ${{ github.event_name }}
            - Mode: ${{ github.event.inputs.mode || 'dropbox' }}"
            
            # Push changes
            git push
            echo "âœ… Logs committed and pushed successfully"
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "Workflow failed. Check the logs for details."
          # The Python script should have already sent error notifications

      - name: Clean up temporary files
        if: always()
        run: |
          # Clean up any remaining temporary files
          find /tmp -name "dropbox_*" -type f -delete 2>/dev/null || true
          echo "Cleanup completed"
